name: AI Code Review

permissions:
  pull-requests: write
  contents: write

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai_code_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install openai requests

      - name: Get PR Diff
        id: pr_diff
        run: |
          echo "DIFF<<EOF" >> $GITHUB_ENV
          gh pr diff ${{ github.event.pull_request.number }} --repo ${{ github.repository }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run OpenAI Code Review
        id: review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          import os
          import openai
          import re

          openai.api_key = os.getenv("OPENAI_API_KEY")
          diff = os.getenv("DIFF", "")

          if len(diff) > 10000:
              diff = diff[:10000]

          system_message = {
              "role": "system",
              "content": """You are a senior software engineer performing a code review on a pull request.

          Identify issues in the code and assign each issue a risk level:

          - üõë Critical: Bugs, security issues, breaking changes.
          - ‚ö†Ô∏è Warning: Code smells, bad practices, performance issues.
          - ‚ÑπÔ∏è Information: Style, naming, readability improvements.

          Output your response in GitHub-flavored Markdown, grouped by risk level, with bullet points under each.

          If a category has no findings, skip it."""
          }

          user_message = {
              "role": "user",
              "content": f"Please review the following PR diff and generate categorized feedback:\n\n{diff}"
          }

          response = openai.chat.completions.create(
              model="gpt-4",
              messages=[system_message, user_message]
          )

          review = response.choices[0].message.content

          # Parse categories
          critical, warning, info = "", "", ""

          critical_match = re.search(r"### üõë Critical Issues\n((?:- .+\n?)+)", review)
          warning_match = re.search(r"### ‚ö†Ô∏è Warnings\n((?:- .+\n?)+)", review)
          info_match = re.search(r"### ‚ÑπÔ∏è Suggestions\n((?:- .+\n?)+)", review)

          if critical_match:
              critical = critical_match.group(1).strip()
              print("::set-output name=has_critical::true")
              print(f"::set-output name=critical::{critical}")
          else:
              print("::set-output name=has_critical::false")

          if warning_match:
              warning = warning_match.group(1).strip()
              print("::set-output name=has_warning::true")
              print(f"::set-output name=warning::{warning}")
          else:
              print("::set-output name=has_warning::false")

          if info_match:
              info = info_match.group(1).strip()
              print("::set-output name=has_info::true")
              print(f"::set-output name=info::{info}")
          else:
              print("::set-output name=has_info::false")
        shell: python

      - name: Post Critical Feedback
        if: steps.review.outputs.has_critical == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### üõë Critical Issues
            ${{ steps.review.outputs.critical }}

      - name: Post Warnings
        if: steps.review.outputs.has_warning == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ‚ö†Ô∏è Warnings
            ${{ steps.review.outputs.warning }}

      - name: Post Info
        if: steps.review.outputs.has_info == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ‚ÑπÔ∏è Suggestions
            ${{ steps.review.outputs.info }}
