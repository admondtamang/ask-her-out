name: AI Code Review

permissions:
  contents: read
  pull-requests: write
  
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai_code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install openai requests

      - name: Get PR diff
        id: pr_diff
        run: |
          echo "DIFF<<EOF" >> $GITHUB_ENV
          gh pr diff ${{ github.event.pull_request.number }} --repo ${{ github.repository }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run OpenAI Code Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python <<EOF
          import os
          import openai

          openai.api_key = os.getenv("OPENAI_API_KEY")
          diff = os.getenv("DIFF", "")

          if len(diff) > 10000:
              diff = diff[:10000]  # Truncate if too long for token limits

          system_message = {
            "role": "system",
            "content": """You are a senior software engineer performing a code review on a pull request.
          
          Identify issues in the code and assign each issue a risk level:
          
          - üõë Critical: Bugs, security issues, breaking changes.
          - ‚ö†Ô∏è Warning: Code smells, bad practices, performance issues.
          - ‚ÑπÔ∏è Information: Style, naming, readability improvements.
          
          Output your response in GitHub-flavored Markdown, grouped by risk level, with bullet points under each.
          
          If a category has no findings, skip it."""
          }
          
          user_message = {
              "role": "user",
              "content": f"Please review the following PR diff and generate categorized feedback:\n\n{diff}"
          }
          response = openai.chat.completions.create(
              model="gpt-4",
              messages=[system_message, user_message]
          )

          review_comment = response.choices[0].message.content

          with open("review.txt", "w") as f:
              f.write(review_comment)
          EOF

      - name: Post Critical Feedback
        if: steps.review.outputs.has_critical == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### üõë Critical Issues
            ${{ steps.review.outputs.critical }}
          reactions: 'eyes'

      - name: Post Warnings
        if: steps.review.outputs.has_warning == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ‚ö†Ô∏è Warnings
            ${{ steps.review.outputs.warning }}
          reactions: '+1'
      
      - name: Post Info
        if: steps.review.outputs.has_info == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ‚ÑπÔ∏è Suggestions
            ${{ steps.review.outputs.info }}
          reactions: 'thinking_face'

