name: AI Code Review

permissions:
  contents: read
  pull-requests: write
  
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai_code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install openai requests

      - name: Get PR diff
        id: pr_diff
        run: |
          echo "DIFF<<EOF" >> $GITHUB_ENV
          gh pr diff ${{ github.event.pull_request.number }} --repo ${{ github.repository }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run OpenAI Code Review and Split Comments
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          import os, openai, re

          openai.api_key = os.getenv("OPENAI_API_KEY")
          diff = os.getenv("DIFF", "")
          if len(diff) > 10000:
              diff = diff[:10000]

          system_msg = {
              "role": "system",
              "content": """You are a senior software engineer performing a code review on a pull request.
          
          Identify issues in the code and assign each issue a risk level:

          - üõë Critical: Bugs, security issues, breaking changes.
          - ‚ö†Ô∏è Warning: Code smells, bad practices, performance issues.
          - ‚ÑπÔ∏è Information: Style, naming, readability improvements.

          Output your response in GitHub-flavored Markdown, grouped by risk level, with bullet points under each.

          If a category has no findings, skip it."""
          }

          user_msg = {
              "role": "user",
              "content": f"Please review the following PR diff and generate categorized feedback:\n\n{diff}"
          }

          response = openai.chat.completions.create(
              model="gpt-4",
              messages=[system_msg, user_msg]
          )

          review = response.choices[0].message.content

          def extract_section(section_title):
              pattern = rf"### {re.escape(section_title)}\n(.*?)(?=\n### |\Z)"
              match = re.search(pattern, review, re.DOTALL)
              return match.group(1).strip() if match else ""

          critical = extract_section("üõë Critical")
          warning = extract_section("‚ö†Ô∏è Warning")
          info = extract_section("‚ÑπÔ∏è Information")

          if critical:
              with open("critical.txt", "w") as f:
                  f.write("### üõë Critical Issues\n" + critical)

          if warning:
              with open("warning.txt", "w") as f:
                  f.write("### ‚ö†Ô∏è Warnings\n" + warning)

          if info:
              with open("info.txt", "w") as f:
                  f.write("### ‚ÑπÔ∏è Suggestions\n" + info)

      - name: Post Critical Feedback
        if: success() && exists('critical.txt') && steps.check_critical.outputs.has_critical == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-file: critical.txt
          reactions: 'eyes'

      - name: Post Warnings
        if: success() && exists('warning.txt')
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-file: warning.txt
          reactions: '+1'

      - name: Post Info
        if: success() && exists('info.txt')
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-file: info.txt
          reactions: 'thinking_face'
