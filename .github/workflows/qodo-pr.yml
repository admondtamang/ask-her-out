name: AI Code Review
permissions:
  contents: read
  pull-requests: write
  
on:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  ai_code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install openai requests
      - name: Get PR diff
        id: pr_diff
        run: |
          echo "DIFF<<EOF" >> $GITHUB_ENV
          gh pr diff ${{ github.event.pull_request.number }} --repo ${{ github.repository }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run OpenAI Code Review with Line Comments
        id: code_review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          python -c '
          import os
          import openai
          import re
          import json
          import subprocess
          
          openai.api_key = os.getenv("OPENAI_API_KEY")
          diff = os.getenv("DIFF", "")
          pr_number = os.getenv("PR_NUMBER")
          repo = os.getenv("REPO")
          
          if len(diff) > 10000:
              diff = diff[:10000]
          
          # Get all changed files with their line numbers
          result = subprocess.run(
              ["gh", "pr", "view", pr_number, "--repo", repo, "--json", "files"],
              capture_output=True, text=True, env=os.environ
          )
          files_data = json.loads(result.stdout)["files"]
          
          # Create system prompt for the API call
          system_msg = {
              "role": "system",
              "content": """You are a senior software engineer performing a code review on a pull request.
          
          Identify specific issues in the code and assign each issue a risk level:
          - üõë Critical: Bugs, security issues, breaking changes
          - ‚ö†Ô∏è Warning: Code smells, bad practices, performance issues
          - ‚ÑπÔ∏è Information: Style, naming, readability improvements
          
          Format your response as a JSON array of objects with these fields:
          - "file_path": the file path where the issue is found
          - "line": the specific line number where the issue occurs (integer)
          - "severity": "critical", "warning", or "info"
          - "comment": detailed explanation of the issue and suggested fix
          
          Focus on providing specific, actionable feedback tied to exact lines of code."""
          }
          
          user_msg = {
              "role": "user",
              "content": f"Please review the following PR diff and generate line-specific feedback:\n\n{diff}"
          }
          
          # Call OpenAI API
          response = openai.chat.completions.create(
              model="gpt-4",
              messages=[system_msg, user_msg],
              response_format={"type": "json_object"}
          )
          
          try:
              # Parse review results
              review_data = json.loads(response.choices[0].message.content)
              comments = review_data.get("comments", [])
              
              has_feedback = False
              
              # Post comments to PR
              if comments and len(comments) > 0:
                  has_feedback = True
                  for comment in comments:
                      file_path = comment.get("file_path")
                      line = comment.get("line")
                      severity = comment.get("severity", "info")
                      message = comment.get("comment")
                      
                      # Add severity emoji
                      if severity == "critical":
                          prefix = "üõë **Critical:** "
                      elif severity == "warning":
                          prefix = "‚ö†Ô∏è **Warning:** "
                      else:
                          prefix = "‚ÑπÔ∏è **Suggestion:** "
                      
                      full_comment = prefix + message
                      
                      # Post comment to specific line
                      if file_path and line and message:
                          comment_cmd = [
                              "gh", "pr", "comment", pr_number,
                              "--repo", repo,
                              "--body", full_comment,
                              "--path", file_path,
                              "--line", str(line)
                          ]
                          subprocess.run(comment_cmd, env=os.environ)
              
              # Set output for next steps
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write(f"has_feedback={str(has_feedback).lower()}\n")
                  
          except json.JSONDecodeError:
              print("Error: Could not parse review results as JSON")
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write("has_feedback=false\n")
          except Exception as e:
              print(f"Error: {str(e)}")
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  f.write("has_feedback=false\n")
          '
      - name: Post Summary Comment
        if: steps.code_review.outputs.has_feedback == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ü§ñ AI Code Review Complete
            
            I've added specific comments to the code. Please check them out and address any issues found.
            
            _This review was performed automatically by AI._
          reactions: 'eyes'
